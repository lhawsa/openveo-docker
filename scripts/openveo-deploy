#!/usr/bin/python3


import sys
import json
import os
import argparse
import string


USED_BUILD_ARGS = {
    'db': [
        'DB_ADMIN_OPERATOR_PASSWD',
        'DB_OPENVEO_OPERATOR_PASSWD',
        'DB_OPENVEO_USER_PASSWD',
        ],
    'app': [
        'COMMON_PREFIX',
        'DB_OPENVEO_USER_PASSWD',
        'APP_SUPER_ADMIN_NAME',
        'APP_SUPER_ADMIN_EMAIL',
        'APP_SUPER_ADMIN_PASSWD',
        ]
    }


COL_GREEN = '\033[92m'
COL_BLUE = '\033[94m'
COL_END = '\033[0m'


class ArgumentParser(argparse.ArgumentParser):
    ACTIONS = 'build', 'nop'

    def __init__(self):
        argparse.ArgumentParser.__init__(self)
        self.add_argument("-c", "--config", default=None, type=str, metavar='CONFIG')
        self.add_argument("-p", "--prefix", default="default", dest="prefix", type=str, metavar='PREFIX')
        self.add_argument(dest="action", nargs=1, type=str, choices=self.ACTIONS, default=None)
        self.add_argument(dest="images", nargs='*', type=str, metavar='IMG')

    def parse_args(self, argv):
        args = argparse.ArgumentParser.parse_args(self, argv)
        return args


class Application:
    def __init__(self, argv):
        self._argv = argv
        self._argparser = ArgumentParser()
        self._config = None

    def getRootDir(self):
        return os.path.abspath("%s/../.." % __file__)

    def makeBuildArgs(self, args, image):
        build_args = {}

        try:
            used_build_args = USED_BUILD_ARGS[image]
        except KeyError:
            used_build_args = []

        for a in used_build_args:
            build_args[a] = self._config['build_args'][a]

        cmd = []
        for k,v in build_args.items():
            cmd += ['--build-arg %s="%s"' % (k,v)]
        cmd = ' '.join(cmd)
        return cmd

    def loadConfig(self, args):
        if args.config==None:
            fn = "%s/conf/%s.json" % (self.getRootDir(), args.prefix)
        else:
            fn = args.config
        self._config = json.loads(open(fn).read())
        self._config['build_args']['COMMON_PREFIX'] = args.prefix

    def __call__(self):
        os.chdir(self.getRootDir())
        args = self._argparser.parse_args(self._argv)
        if len(args.images)==0:
            args.images = sorted(USED_BUILD_ARGS.keys())

        self.loadConfig(args)
        action = args.action[0]
        try:
            f = getattr(self, "do%s%s" % (action[0].upper(), action[1:].lower()))
        except:
            f = self.printHelp
        f(args)

    def printHelp(self, args):
        self._argparser.print_help()

    def system(self, cmd):
        print(COL_BLUE + "* " + COL_END + COL_GREEN + cmd + COL_END)
        sts = os.system(cmd)
        if sts != 0:
            sys.exit(-1)

    def doBuild(self, args):
        self.system("docker build -t common images/common")
        for img in args.images:
            cmd = "docker build "
            cmd += self.makeBuildArgs(args, img)
            cmd += " -t %s-%s images/%s" % (args.prefix, img, img)
            self.system(cmd)

    def doNop(self, args):
        print('Nop !')


def main():
    app = Application(sys.argv[1:])
    app()


if __name__ == '__main__':
    main()
